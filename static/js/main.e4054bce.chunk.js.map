{"version":3,"sources":["serviceWorker.js","layout/Layout.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Home","lazy","App","NoMatch","Header","Sider","Content","urlList","path","name","icon","exact","component","LayoutSwitch","useState","collapsed","setCollapsed","trigger","collapsible","breakpoint","collapsedWidth","className","theme","mode","defaultSelectedKeys","pathname","map","url","Item","key","to","type","onClick","style","color","fallback","HomeLayout","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e4054bce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { lazy, Suspense, useState } from 'react';\n\n// 路由\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\n// 第三方组件库\nimport { Spin, Layout, Menu, Icon } from 'antd';\n\n// 样式\nimport './layout.css';\n\n// 自定义组件\nconst Home = lazy(() => import('../mod/home/Home'));\nconst App = lazy(() => import('../mod/app/App'));\nconst NoMatch = lazy(() => import('../mod/nomatch/Nomatch'));\n\nconst { Header, Sider, Content } = Layout;\n\nconst urlList = [\n  {\n    path: '/',\n    name: 'Home',\n    icon: 'home',\n    exact: true,\n    component: Home\n  },\n  {\n    path: '/list',\n    name: 'list',\n    icon: 'caret-right',\n    component: App\n  },\n  {\n    path: '',\n    component: NoMatch\n  }\n];\n\nfunction LayoutSwitch({ location }) {\n  const [collapsed, setCollapsed] = useState(false);\n  // 切换侧边栏\n  const toggle = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <Router>\n      <Layout>\n        <Sider\n          trigger={null}\n          collapsible\n          collapsed={collapsed}\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n        >\n          <div className=\"logo\" />\n          <Menu\n            theme=\"dark\"\n            mode=\"inline\"\n            defaultSelectedKeys={[location.pathname]}\n          >\n            {urlList.map(url => {\n              return (\n                <Menu.Item key={url.path}>\n                  <Link to={url.path}>\n                    <Icon type={url.icon} />\n                    <span>{url.name}</span>\n                  </Link>\n                </Menu.Item>\n              );\n            })}\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header>\n            <Icon\n              className=\"trigger\"\n              type={collapsed ? 'menu-unfold' : 'menu-fold'}\n              onClick={toggle}\n              style={{\n                color: '#ffffff'\n              }}\n            />\n          </Header>\n          <Content className={'content'}>\n            <Suspense fallback={<Spin />}>\n              <Switch>\n                {urlList.map(url => {\n                  return <Route {...url} />;\n                })}\n              </Switch>\n            </Suspense>\n          </Content>\n        </Layout>\n      </Layout>\n    </Router>\n  );\n}\n\nfunction HomeLayout() {\n  return (\n    <Router>\n      <Route component={LayoutSwitch} />\n    </Router>\n  );\n}\n\nexport default HomeLayout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport HomeLayout from './layout/Layout';\n\n// 样式\nimport './index.css';\nimport './global.css';\n\n// mock\nimport './mock/mock-global';\n\n// 路由页\n// 布局也写到该页\nReactDOM.render(<HomeLayout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}